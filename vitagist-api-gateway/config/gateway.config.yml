http:
  port: ${X_ZOHO_CATALYST_LISTEN_PORT} 
  cors: 
    origin: '*'
    methods: 'GET, POST, PUT, DELETE'

apiEndpoints:
  login:
    paths: '/api/v1/consumers/login'
  register:
    paths: '/api/v1/consumers/register'
  consumers:
    host: '*'
    paths: '/api/v1/consumers/*' 
  documents:
    host: '*'
    paths: '/api/v1/documents/*'

serviceEndpoints:
  consumerService:
    url: ${CONSUMER_SERVICE_URL} 
  documentService:
    url:  ${DOCUMENT_SERVICE_URL}

policies:
  - jwt
  - log
  - cors
  - proxy  
  - request-transformer 
  - expression

pipelines:
  loginPipeline:
    apiEndpoints:
      - login
    policies: 
      - cors:
          action:
            origin: '*'
            methods: 'GET, POST, PUT, DELETE' 
      - proxy:
          action:
            serviceEndpoint: consumerService
            changeOrigin: true  
      - log:
          action:
            message: 'login request proxy to consumer service '

  registerPipeline:
    apiEndpoints:
      - register
    policies: 
      - cors:
          action:
            origin: '*'
            methods: 'GET, POST, PUT, DELETE'
      - log:
          action:
            message: 'register request proxy to consumer service'
      - proxy:
          action:
            serviceEndpoint: consumerService
            changeOrigin: true 

  consumerPipeline:
    apiEndpoints:
      - consumers
    policies:   
      - cors:
          action:
            origin: '*'
            methods: 'GET, POST, PUT, DELETE'
      - jwt:
          action:
            secretOrPublicKey: ${JWT_SECRET}
            checkCredentialExistence: false
            jwtAlgorithms: ['HS256']    
          
      # - request-transformer:
      #     action:
      #       headers:
      #         add:
      #           x-coffer-id: req.user.coffer_id
      - log: 
          action:
            message: 'successfully authenticated'
      - proxy:
          action:
            serviceEndpoint: consumerService 
            changeOrigin: true   
      - log:
          action:
            message: 'consumer request proxy to consumer service ' 

  documentPipeline:
    apiEndpoints:
      - documents
    policies:  
      - cors:
          action:
            origin: '*'
            methods: 'GET, POST, PUT, DELETE'
     
      # - jwt:
      #     action:
      #       secretOrPublicKey:  ${JWT_SECRET}
      #       checkCredentialExistence: false
      #       jwtAlgorithms: ['HS256']    
          
      # - log: 
      #     action:
      #       message: 'JWT token decoded: ${JSON.stringify(req.user)}'
      - proxy:
          action:
            serviceEndpoint: documentService 
            changeOrigin: true  
      - log:
          action:
            message: 'document request proxy to document service ' 